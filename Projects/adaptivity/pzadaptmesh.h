/* Generated by Together */

#ifndef TPZADAPTMESH_H
#define TPZADAPTMESH_H

#include "pzcmesh.h"
#include "pzcclonemesh.h"
#include "pzvec.h"

class TPZInterpolatedElement;
class TPZTransfer;
class TPZTransform;
template<class T, class V>
class TPZAvlMap;
class TPZOneDRef;

class TPZAdaptMesh {
 public:
	 void RemoveCloneBC(TPZCompMesh *mesh);

  /**
   * Simple constructor
   */
  TPZAdaptMesh();    
  
  /**
   * Simple destructor
   */
  ~TPZAdaptMesh();
  
  /**
   * Defines the computational reference mesh
   */
  void SetCompMesh(TPZCompMesh * mesh);
  
  /**
   * Public interface to get the optmally refined mesh 
   * @param error: returns the estimated error
   * @param truerror: returns the true error if analitical solution is provided
   * @param ervec: estimated element error for original mesh element vector
   * @param f: analitical solution
   * @param truervec: real element error at each orginal mesh element
   * @param effect: error estimator effectivity
   */
  TPZCompMesh * GetAdaptedMesh(REAL &error,
			       REAL &truerror,
			       TPZVec<REAL> &ervec, 
			       void (*f)(TPZVec<REAL> &loc,TPZVec<REAL> &val,TPZFMatrix &deriv),
			       TPZVec<REAL> &truervec, 
			       TPZVec<REAL> &effect);

 protected:
  
  
  /**
   * Retrieves the geometric reference elements to create the patches 
   */
  void GetReferenceElements();
  
  /**
   * Builds the patch of all reference elements. 
   * The patches are stored into patch vectors
   */   
  void BuildReferencePatch();
  
  /**
   * Fill the vector of clone meshes
   */
  void CreateClones();
  
  /**
   * Sorts the elements by the error vector vec, returning permutation vector
   */
  void Sort(TPZVec<REAL> &vec, TPZVec<int> &perm);
  
  /**
   * Sort
   */
  void HeapSort(TPZVec<REAL> &sol, TPZVec<int> &perm);

  /**
   * Creates an adpted computational mesh based on original mesh and in a hp refinement pattern also
   * @param mesh: original mesh
   * @param gelstack: h refinement pattern given by a list of an adapted geometric elements
   * @param porders: p refinement pattern for each element of gelstack
   */
  TPZCompMesh* CreateCompMesh (TPZCompMesh *mesh,TPZVec<TPZGeoEl *> &gelstack,TPZVec<int> &porders);
  
 public:
	 static void DeleteElements(TPZCompMesh *mesh);
 private:   
	 static TPZInterpolatedElement * LargeElement(TPZInterpolatedElement *cint);
  /**
   * Computational reference mesh
   */
  TPZCompMesh *fReference;
  
  /**
   * Geometric reference elements vector
   */
  TPZStack < TPZGeoEl * > fGeoRef;
  
  /**
   * Patches vector
   */
  TPZStack < TPZGeoEl * > fPatch;
  
  /**
   * Maps the start position of each patch into patches vector
   */
  TPZStack < int > fPatchIndex;
  
  /**
   * Element error vector
   */
  TPZStack < REAL > fElementError;
  
  /**
   * Clone meshes vector
   */
  TPZStack<TPZCompCloneMesh *> fCloneMesh;
  
  /**
   * Refined clone meshes
   */
  TPZStack <TPZCompMesh *> fFineCloneMesh;
  
  void CleanUp();
};
#endif //TPZADAPTMESH_H
