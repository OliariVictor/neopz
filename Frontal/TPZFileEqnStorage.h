/* Generated by Together */

#ifndef TPZFILEEQNSTORAGE_H
#define TPZFILEEQNSTORAGE_H
//#include "TPZFrontMatrix.h"
#include "tpzeqnarray.h"
#include <pzstack.h>
#include "pzstack.h"
#include "tpzeqnarray.h"
#include "pzfmatrix.h"
/** 
 * Has the same purpouse of EqnStack but stores the EqnArrays \n
 * in a different form (binary files). \n
 * It has methods for operating over a set of equations. \n
 * The arrays of equations are in the form of a binary files of EqnArrays.
 * @ingroup frontal
 */
class TPZFileEqnStorage {
public:
     /**Reopens an binary file with its current fFileName*/
     void ReOpen();

     /**
      * Reinitialize the object
      */
      void Zero();
    /** Method used for binary input/output */
	void ReadBlockPositions();
    /** Method used for binary input/output */
	void FinishWriting();
    /** Sets file name and if it is for input or output, the second term can be either 'r' for input and 'w' for output.*/
	//void SetFileName(const char *name);

    /**
     * Sets file name and if it is for input or output, the second term can be either 'r' for input and 'w' for output. 
     */
	void OpenGeneric(
	     char option //! 'w' means writing and 'r' reading
	     , const char * name //! The file name to print to
	     );
    /** Simple constructor */
	TPZFileEqnStorage();
    /** Static main for testing */
	static void main();

      /** Simple destructor */
    ~TPZFileEqnStorage();
    /** Constructor
        option can assume "w" or "r" for writeing and reading respectively
        */
    TPZFileEqnStorage(
		      char option //! 'w' means writing and 'r' reading
		      , const char * name //! the file name to print to
		      );
    /** Adds an EqnArray */
    void AddEqnArray(
		     TPZEqnArray *EqnArray //! EqnArray added to the binary file
		     );

    /**
     * It prints TPZEqnStorage data. 
     */
    void Print(
          const char *name //!File name to print to
          , std::ostream& out //!ofstream object name
          ); 
    /** Resets data */
    void Reset();
    /** Executes a Backward substitution */
    void Backward(
          TPZFMatrix &f //!Full matrix already decomposed.
          , DecomposeType dec //!Decomposition type of f
          ) const;
          
    /** Executes a Forward substitution */
    void Forward(
          TPZFMatrix &f //!Full matrix already decomposed.
          , DecomposeType dec //!Decomposition type of f
          ) const;

    /**
     * @stereotype void 
     */
    /** Stores from ieq to jeq equations on a binary file */
    void Store(
          int ieq //!Initial equation to be added to EqnArray
          , int jeq //!Final equation to be added to EqnArray
          , const char *name //!Binary file name
          );    

    /**
     * Writes the header of the binary file 
     */
    void WriteHeaders();
    /** Sets the block size for writing */
   /* void SetBlockSize(int bs);*/
   
   /**
    *Type of Storage
    */
   char * GetStorage();


private:
	/** In blocks position */
	//TPZStack<long int> fSubBlockIndex;

    /** Indicates the number of headers for the object */
	int fNumHeaders;
    /** Indicates blocksize */
	//int fBlockSize;

    /**
     * Stack containing block positions 
     */
    TPZStack<long int> fBlockPos;

    /** @label Several objects are stored within a stack object
     * @directed
     * @link association*/
    /*#  TPZEqnArray lnkTPZEqnArray; */
    /** file name containing binary data */
    char fFileName[256];

    /**
     * binary file itself 
     */
    FILE *fIOStream;
    /** Used with binary input/output aritimethics */
    int fCurrentBlock;
    /** Used with binary input/output aritimethics */
    int fCurBlockPosition;
    /** Used with binary input/output aritimethics */
    int fNumBlocks;
};
#endif //TPZFILEEQNSTORAGE_H
