dnl
dnl configure.in for NeoPZ
dnl
dnl Process this file with GNU autoconf(1) to produce a configure script.
dnl
dnl $Id: configure.in,v 1.1.1.1 2003-02-04 16:45:27 cantao Exp $
dnl

dnl ----------------------------------------------------------------------------
dnl                              INITIAL CHECKINGS
dnl ----------------------------------------------------------------------------

dnl Checking if we are in the CFD kernel source tree
AC_INIT(PZ.mk.in)

dnl Requires a recent version of autoconf
AC_PREREQ(2.13)

dnl Sets the default prefix instalation (/usr/local/pz)
AC_PREFIX_DEFAULT(/usr/local/pz)

dnl PZ version stuff
PZ_VERSION=2
PZ_REV=0

AC_SUBST(PZ_VERSION)
AC_SUBST(PZ_REV)

dnl Greetings!
PZ_GREETINGS

dnl System variables
AC_CANONICAL_SYSTEM

dnl Elects c++ as the default testing language
AC_LANG_CPLUSPLUS

dnl Initializes automake (must provide aclocal.m4!)
AM_INIT_AUTOMAKE(pz, $PZ_VERSION.$PZ_REV)
AM_SANITY_CHECK

dnl Tests the existance of a c++ compiler (m4 macro)
PZ_PROG_CXX

dnl Checks for other common programs (gcc, ar, ranlib and install)
AC_PROG_CC
PZ_PROG_AR
AC_PROG_RANLIB
AC_PROG_INSTALL

dnl ----------------------------------------------------------------------------
dnl                          ARCHITECTURE SPECIFICS     
dnl ----------------------------------------------------------------------------

dnl Determining standard include location and system architecture
case "$target" in
  i*86-*-linux-*)
    ARCH_INCLUDES=
    ;;
  *)
    AC_MSG_ERROR(cannot determine system architecture.)
    ;;
esac

AC_SUBST(ARCH_INCLUDES)

dnl ----------------------------------------------------------------------------
dnl                              COMPILATION MODE
dnl ----------------------------------------------------------------------------

dnl Sets the compilation mode (devel, profiling, opt)
AC_ARG_WITH(compilation-mode,
  [  --with-compilation-mode=MODE
                          'devel' for development (debug)
                          'profiling' for use with gprof
                          'opt' for maximum optimization],
  [comp_mode=$withval],
  [comp_mode=${comp_mode='devel'}])

case "${comp_mode}" in
  devel)
    echo "Development mode chosen. Debug symbols will be added."
    COMPILATION_MODE="Development compilation mode."
    case "$CXX" in
      c++ | g++)
        MODE_OPTIONS="-Wall -ggdb3 -pipe -fno-default-inline -fno-inline"
        ;;
      *)
        AC_MSG_ERROR(unsupported compiler.)
        ;;
    esac
    ;;
  profiling)
    echo "Profiling mode chosen. Information for gprof will be added."
    COMPILATION_MODE="Profiling compilation mode."
    case "$CXX" in
      c++ | g++)
        MODE_OPTIONS="-Wall -time -ggdb3 -pg -pipe"
        ;;
      *)
        AC_MSG_ERROR(unsupported compiler.)
        ;;
    esac
    ;;
  opt)
    echo "Optimization mode chosen. Warp 9 Mr. Sulu!"
    COMPILATION_MODE="Optimization compilation mode."
    case "$CXX" in
      c++ | g++)
        dnl Assumed by -O2, but here anyway :)
        dnl   -fthread-jumps -fomit-frame-pointer -fstrength-reduce
        dnl   -fcse-follow-jumps -fcse-skip-blocks -frerun-cse-after-loop
        dnl   -frerun-loop-opt -fgcse -fexpensive-optimizations
        dnl   -fmove-all-movables

	dnl Use -march=`uname -m` with caution!

	dnl For the future:
	dnl -fno-math-errno -funsafe-math-optimizations -fno-trapping-math \
	dnl -mfpmath=sse

        MODE_OPTIONS="-s -O2 -march=`uname -m` -fthread-jumps -fomit-frame-pointer -fstrength-reduce -fcse-follow-jumps -fcse-skip-blocks -frerun-cse-after-loop -frerun-loop-opt -fgcse -fexpensive-optimizations -fmove-all-movables -funroll-loops -ffast-math -fregmove -falign-functions -falign-jumps -falign-loops -malign-double -finline-limit=3000 -fshort-enums -fforce-addr -fdefault-inline -foptimize-sibling-calls -pipe -fno-rtti"
        ;;
      *)
        AC_MSG_ERROR(unsupported compiler.)
      ;;
    esac
    ;;
  *)
    AC_MSG_ERROR(bad value ${comp_mode} for --with-compilation-mode)
    ;;
esac

AC_SUBST(COMPILATION_MODE)
AC_SUBST(MODE_OPTIONS)

PZ_CXXFLAGS=$MODE_OPTIONS
PZ_MK="PZ.mk"

AC_SUBST(PZ_CXXFLAGS)
AC_SUBST(PZ_MK)

dnl ----------------------------------------------------------------------------
dnl                              ENABLE MeTiS?
dnl ----------------------------------------------------------------------------

AC_ARG_ENABLE(metis,
  [  --enable-metis=yes      Enables the use of MeTiS [default=no]],
  [metis_enabled=$enableval],
  [metis_enabled="no"])

case "${metis_enabled}" in
  yes)
    echo "Enabling MeTiS code."
    USING_METIS="-DUSING_METIS"
  ;;
  no)
    echo "MeTiS not chosen."
    USING_METIS=""
  ;;
  *)
    AC_MSG_ERROR(bad value ${metis_enabled} for --enable-metis)
  ;;
esac

AM_CONDITIONAL( METIS, test x${metis_enabled} = xyes )

AC_SUBST(USING_METIS)

dnl ----------------------------------------------------------------------------
dnl                               MeTiS LOCATION
dnl ----------------------------------------------------------------------------

dnl MeTiS location
AC_ARG_WITH(metis-dir,
  [  --with-metis-dir=DIR    Root of MeTiS instalation [/usr/local/Metis-4.0]],
  [metis_dir=$withval],
  [metis_dir=${metis_dir="/usr/local/Metis-4.0"}])

case "${metis_enabled}" in
  yes)
    METISDIR=$metis_dir
  ;;
  no)
    METISDIR=""
  ;;
  *)
    AC_MSG_ERROR(bad value ${metis_enabled} for --enable-metis)
  ;;
esac

AC_SUBST(METISDIR)

dnl ----------------------------------------------------------------------------
dnl                              ENABLE Sloan
dnl ----------------------------------------------------------------------------

AC_ARG_ENABLE(sloan,
  [  --enable-sloan          Enables the use of Sloan],
  [sloan_enabled=$enableval],
  [sloan_enabled="no"])

case "${sloan_enabled}" in
  yes)
    echo "Enabling Sloan code."
    USING_SLOAN="-DUSING_SLOAN"
  ;;
  no)
    echo "Sloan not chosen."
    USING_SLOAN=""
  ;;
  *)
    AC_MSG_ERROR(bad value ${sloan_enabled} for --enable-sloan)
  ;;
esac

AC_SUBST(USING_SLOAN)

dnl Cleaning

PZ_DISTCLEANFILES="*~ *.h.ps *.cc.ps *.gcov *.bb *.bbg *.da gmon.out core octave-core wrong *.info *.prof"

PZ_CLEANFILES="*~ core octave-core *.o *.info"

AC_SUBST(PZ_DISTCLEANFILES)
AC_SUBST(PZ_CLEANFILES)

dnl ----------------------------------------------------------------------------
dnl                              CONGRATULATIONS!
dnl ----------------------------------------------------------------------------

AC_OUTPUT([ Makefile PZ.mk PZ_user.mk \
dnl --| PZ subtree |--
	Util/Makefile \
	Matrix/Makefile \
	Cosys/Makefile \
	Multigrid/Makefile \
	Material/Makefile \
	Post/Makefile \
	Shape/Makefile \
	Integral/Makefile \
	Geom/Makefile \
	Mesh/Makefile \
	Refine/Makefile \
	External/Makefile \
	Analysis/Makefile \
	Frontal/Makefile \
	StrMatrix/Makefile \
	Pre/Makefile \
	Common/Makefile \
	LinearSolvers/Makefile \
	lib/Makefile \
dnl --| Projects subtree |--
	Projects/Makefile \
	Projects/adaptivity/Makefile \
	Projects/angletest/Makefile \
	Projects/checkcont/Makefile \
])

PZ_BYEBYE

dnl --| NeoPZ |-----------------------------------------------------------------
