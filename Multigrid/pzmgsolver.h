/* Generated by Together */

#ifndef TPZMGSOLVER_H
#define TPZMGSOLVER_H
#include "pzsolve.h"
#include "pzstepsolver.h"

class TPZFMatrix;
class TPZTransfer;
class TPZMGSolver : public TPZMatrixSolver {
public:

  TPZMGSolver(TPZAutoPointer<TPZTransfer> trf,const TPZMatrixSolver &sol, int nvar, TPZAutoPointer<TPZMatrix> refmat);
  TPZMGSolver(TPZAutoPointer<TPZTransfer> trf,const TPZMatrixSolver &sol, int nvar);

    TPZMGSolver(const TPZMGSolver & copy);



    ~TPZMGSolver();

    void SetTransferMatrix(TPZAutoPointer<TPZTransfer> Refmat);

    void ResetTransferMatrix();

    TPZAutoPointer<TPZTransfer> TransferMatrix() { return fStep;}

    TPZSolver * Clone() const;

    void Solve(const TPZFMatrix &F, TPZFMatrix &result, TPZFMatrix *residual = 0);

private:    
  TPZMatrixSolver * fCoarse;
  int fNVar;
  TPZAutoPointer<TPZTransfer> fStep;
  //    TPZMatrixSolver::TPZContainer *fTransfer;
};
#endif //TPZMGSOLVER_H
